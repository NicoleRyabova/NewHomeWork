package Task2;
//Напишите программу, иллюстрирующую деятельность воображаемой фруктовой базы,
//которая по запросам от клиентов предоставляет различные фрукты.
//В программе фруктовая база реализуется через класс FruitBase.
//Роль запросов у нас будут играть аргументы командной строки. Каждый аргумент является словом в запросе.
//Если среди этих слов будут встречаться названия известных фруктов, то будет формироваться груз,
//содержащий указанные фрукты.
//Если передан "пустой запрос" (не переданы аргументы), то программа завершается.
//
//По итогу выполнения выводится информация о собранном грузе - общий вес и цена.
//Значения цены и веса каждого фрукта на ваше усмотрение.
//
//Пример запроса: Orange Orange Blueberry Grape Pineapple
//На этот запрос должна вернуться информация о грузе, содержащем два Orange и один Pineapple.
//
//Все классы должны быть инкапсулированы, а геттеры и сеттеры соблюдать конвенцию именования методов.
//Здесь описаны только обязательные методы. Если для реализации нужны или удобны вспомогательные методы, то их можно реализовать как внутренние методы соответствующего класса.
//Например, в классе Cargo можно добавить внутренний вспомогательный метод для добавления записи в массив.
//
//При написании программы надо реализовать:
//- класс FruitBase
//    находится в пакете com.fruitbase
//    содержит поле FruitCatalogue
//    содержит конструктор без параметров
//        в нем инициализируется поле FruitCatalogue
//    содержит общедоступный метод для обработки заказа takeOrder
//        в этом методе происходит поиск слов из заказа в FruitCatalogue
//        если хотя бы одно название найдено, то формируется груз Cargo с информацией о найденных фруктах
//        Если среди запроса не встретились известные названия,
//        то возвращается груз Cargo с нулевым количеством фруктов
//    содержит метод main
//        здесь происходит выполнение программы согласно описанию выше
//        основные шаги:
//            создается фруктовая база
//            проверяется наличие заказа от пользователя
//            если есть заказ, то он передается в метод takeOrder
//            выводим результат
//
//
//- класс FruitCatalogue
//    находится в пакете com.fruitbase
//    содержит поле массив Fruit - список записей известных фруктов
//    содержит конструктор без параметров
//        при создании во внутренний массив добавляются записи-экзмепляры известных фруктов
//    содержит метод findFruit, доступный только в пакете
//        по переданному слову проверяет есть ли информация о таком фрукте
//        если есть, то возвращает Fruit. Если нет, то возвращает null.
//
//- класс Cargo
//    находится в пакете com.fruitbase
//    содержит поле массив Fruit - записи о фруктах, добавленных в груз
//    содержит консткрутор без параметров
//        в нем инициализируется внутренний массив
//    содержит общедоступный метод getWeight - возвращает суммарный вес груза
//    содержит общедоступный метод getPrice - возвращает суммарную цену груза
//    содержит метод addFruit, доступный только в пакете - добавляет Fruit во внутренний массив
//
//- абстрактный класс Fruit
//    находится в пакете com.fruitbase.fruits
//    содержит наследуемое поле вес
//    содержит наследуемое поле цена
//    содержит наследуемое поле name
//    содержит общедоступный метод по-умолчанию для получения значения веса getWeight
//    содержит общедоступный метод по-умолчанию для получения значения цены getPrice
//    содержит общедоступный метод по-умолчанию для получения значения цены getName
//
//- классы видов фруктов в пакете с классом Fruit
//    находятся в пакете com.fruitbase.fruits
//    Apple
//    Orange
//    Banana
//    Pineapple
//    Каждый класс наследуется от Fruit
//    В конструкторе класса устанавливаются значения веса, цены, названия для фрукта
//
//Вес измеряется в кг и имеет тип double. Цена измеряется в у.е. и имеет тип BigDecimal.
public class Main {
}
